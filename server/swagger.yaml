openapi: 3.0.0
info:
  title: Doctor Appointment Booking API
  description: API documentation for the doctor appointment booking system
  version: 1.0.0

servers:
  - url:  https://mediconnect-doctor-appointment.onrender.com
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "642d3c6e3f1a5c00123abcde"
        name:
          type: string
          example: "Shraddha Tripathi"
        email:
          type: string
          example: "shraddha@example.com"
        phone:
          type: string
          example: "+919876543210"
        role:
          type: string
          enum: [patient, doctor]
          example: "patient"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-01T08:30:00Z"

    Doctor:
      type: object
      properties:
        _id:
          type: string
          example: "642d3c6e3f1a5c00123abcd9"
        name:
          type: string
          example: "Dr. John Doe"
        email:
          type: string
          example: "johndoe@hospital.com"
        phone:
          type: string
          example: "+919812345678"
        specialization:
          type: string
          example: "Cardiology"
        bio:
          type: string
          example: "Experienced cardiologist with 10+ years in patient care."
        qualifications:
          type: array
          items:
            type: object
            properties:
              degree:
                type: string
                example: "MBBS"
              university:
                type: string
                example: "AIIMS, Delhi"
        experience:
          type: array
          items:
            type: object
            properties:
              startingDate:
                type: string
                format: date
                example: "2012-08-01"
              endingDate:
                type: string
                format: date
                example: "2018-07-31"
        timeSlots:
          type: array
          items:
            type: string
            example: "09:00-10:00"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-15T09:00:00Z"

    Appointment:
      type: object
      properties:
        _id:
          type: string
          example: "642d3c6e3f1a5c00123abcf0"
        patientId:
          type: string
          example: "642d3c6e3f1a5c00123abcde"
        doctorId:
          type: string
          example: "642d3c6e3f1a5c00123abcd9"
        date:
          type: string
          format: date
          example: "2025-06-10"
        timeSlot:
          type: string
          example: "14:00-15:00"
        reason:
          type: string
          example: "Routine checkup"
        status:
          type: string
          enum: [pending, confirmed, cancelled]
          example: "confirmed"
        createdAt:
          type: string
          format: date-time
          example: "2025-05-20T10:15:00Z"

    Review:
      type: object
      properties:
        _id:
          type: string
          example: "642d3c6e3f1a5c00123abcf9"
        doctorId:
          type: string
          example: "642d3c6e3f1a5c00123abcd9"
        userId:
          type: string
          example: "642d3c6e3f1a5c00123abcde"
        rating:
          type: number
          format: float
          example: 4.5
        reviewText:
          type: string
          example: "Very professional and attentive doctor."
        createdAt:
          type: string
          format: date-time
          example: "2025-05-25T11:00:00Z"

    AuthLoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

security:
  - bearerAuth: []

paths:
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                  example: Shraddha
                email:
                  type: string
                  format: email
                  example: shraddha@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                role:
                  type: string
                  example: user
                gender:
                  type: string
                  example: female
                photo:
                  type: string
                  example: https://example.com/photo.jpg
      responses:
        '201':
          description: User created
        '400':
          description: Bad request

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '401':
          description: Invalid credentials

  /api/users/profile/me:
    get:
      tags:
        - Users
      summary: Get the logged-in user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

    put:
      tags:
        - Users
      summary: Update the logged-in user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /api/users/appointments/my-appointments:
    get:
      tags:
        - Users
      summary: Get appointments for the logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '401':
          description: Unauthorized

  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get a single user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

    put:
      tags:
        - Users
      summary: Update a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

    delete:
      tags:
        - Users
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

  /api/doctors/profile/me:
    get:
      tags:
        - Doctors
      summary: Get the logged-in doctor's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Doctor profile fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized

    put:
      tags:
        - Doctors
      summary: Update the logged-in doctor's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                specialization:
                  type: string
                bio:
                  type: string
                phone:
                  type: string
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/doctors:
    get:
      tags:
        - Doctors
      summary: Get all doctors
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'

  /api/doctors/{id}:
    get:
      tags:
        - Doctors
      summary: Get a single doctor by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Doctor ID
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '404':
          description: Doctor not found

    put:
      tags:
        - Doctors
      summary: Update a doctor by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Doctor ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                specialization:
                  type: string
      responses:
        '200':
          description: Doctor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        '401':
          description: Unauthorized

    delete:
      tags:
        - Doctors
      summary: Delete a doctor by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Doctor ID
      responses:
        '200':
          description: Doctor deleted
        '401':
          description: Unauthorized
        '404':
          description: Doctor not found

  
 
  /api/appointments:
    post:
      tags:
        - Appointments
      summary: Create a new appointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - doctor
                - appointmentDate
                - time
                - day
              properties:
                doctor:
                  type: string
                  description: Doctor ID
                appointmentDate:
                  type: string
                  format: date
                time:
                  type: string
                day:
                  type: string
      responses:
        '201':
          description: Appointment created successfully
        '400':
          description: Missing or invalid fields
        '401':
          description: Unauthorized
        '500':
          description: Server error

    get:
      tags:
        - Appointments
      summary: Get appointments for the logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of appointments
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/appointments/appointments:
    get:
      tags:
        - Appointments
      summary: Get appointments for the logged-in doctor
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of appointments for the doctor
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/appointments/{id}:
    put:
      tags:
        - Appointments
      summary: Update an appointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentDate:
                  type: string
                  format: date
                time:
                  type: string
                day:
                  type: string
      responses:
        '200':
          description: Appointment updated
        '404':
          description: Appointment not found
        '500':
          description: Server error

    delete:
      tags:
        - Appointments
      summary: Delete an appointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Appointment deleted
        '404':
          description: Appointment not found
        '500':
          description: Server error


  /api/doctors/{doctorId}/reviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews for a doctor
      parameters:
        - in: path
          name: doctorId
          schema:
            type: string
          required: true
          description: Doctor ID
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'

    post:
      tags:
        - Reviews
      summary: Add a review to a doctor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: doctorId
          schema:
            type: string
          required: true
          description: Doctor ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                reviewText:
                  type: string
      responses:
        '201':
          description: Review created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        


